package sqlvulnerabilityassessmentscanresult

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type RuleSeverity string

const (
	RuleSeverityHigh          RuleSeverity = "High"
	RuleSeverityInformational RuleSeverity = "Informational"
	RuleSeverityLow           RuleSeverity = "Low"
	RuleSeverityMedium        RuleSeverity = "Medium"
	RuleSeverityObsolete      RuleSeverity = "Obsolete"
)

func PossibleValuesForRuleSeverity() []string {
	return []string{
		string(RuleSeverityHigh),
		string(RuleSeverityInformational),
		string(RuleSeverityLow),
		string(RuleSeverityMedium),
		string(RuleSeverityObsolete),
	}
}

func (s *RuleSeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseRuleSeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseRuleSeverity(input string) (*RuleSeverity, error) {
	vals := map[string]RuleSeverity{
		"high":          RuleSeverityHigh,
		"informational": RuleSeverityInformational,
		"low":           RuleSeverityLow,
		"medium":        RuleSeverityMedium,
		"obsolete":      RuleSeverityObsolete,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := RuleSeverity(input)
	return &out, nil
}

type RuleStatus string

const (
	RuleStatusFinding       RuleStatus = "Finding"
	RuleStatusInternalError RuleStatus = "InternalError"
	RuleStatusNonFinding    RuleStatus = "NonFinding"
)

func PossibleValuesForRuleStatus() []string {
	return []string{
		string(RuleStatusFinding),
		string(RuleStatusInternalError),
		string(RuleStatusNonFinding),
	}
}

func (s *RuleStatus) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseRuleStatus(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseRuleStatus(input string) (*RuleStatus, error) {
	vals := map[string]RuleStatus{
		"finding":       RuleStatusFinding,
		"internalerror": RuleStatusInternalError,
		"nonfinding":    RuleStatusNonFinding,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := RuleStatus(input)
	return &out, nil
}

type RuleType string

const (
	RuleTypeBaselineExpected RuleType = "BaselineExpected"
	RuleTypeBinary           RuleType = "Binary"
	RuleTypeNegativeList     RuleType = "NegativeList"
	RuleTypePositiveList     RuleType = "PositiveList"
)

func PossibleValuesForRuleType() []string {
	return []string{
		string(RuleTypeBaselineExpected),
		string(RuleTypeBinary),
		string(RuleTypeNegativeList),
		string(RuleTypePositiveList),
	}
}

func (s *RuleType) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseRuleType(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseRuleType(input string) (*RuleType, error) {
	vals := map[string]RuleType{
		"baselineexpected": RuleTypeBaselineExpected,
		"binary":           RuleTypeBinary,
		"negativelist":     RuleTypeNegativeList,
		"positivelist":     RuleTypePositiveList,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := RuleType(input)
	return &out, nil
}

type VulnerabilityAssessmentSystemDatabaseName string

const (
	VulnerabilityAssessmentSystemDatabaseNameMaster VulnerabilityAssessmentSystemDatabaseName = "master"
)

func PossibleValuesForVulnerabilityAssessmentSystemDatabaseName() []string {
	return []string{
		string(VulnerabilityAssessmentSystemDatabaseNameMaster),
	}
}

func (s *VulnerabilityAssessmentSystemDatabaseName) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseVulnerabilityAssessmentSystemDatabaseName(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseVulnerabilityAssessmentSystemDatabaseName(input string) (*VulnerabilityAssessmentSystemDatabaseName, error) {
	vals := map[string]VulnerabilityAssessmentSystemDatabaseName{
		"master": VulnerabilityAssessmentSystemDatabaseNameMaster,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := VulnerabilityAssessmentSystemDatabaseName(input)
	return &out, nil
}
